// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(50)
  email      String   @unique @db.VarChar(75)
  password   String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")
  Borrowings Borrowing[]

  @@map("admins")
}

model Book {
  id         Int      @id @default(autoincrement())
  title      String
  author     String
  publisher  String?
  year       Int?
  image      String?
  quantity   Int      @default(0)
  createdAt  DateTime @default(now()) @map("created_at")
  Borrowings Borrowing[]

  @@map("books")
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  phone      String?
  createdAt  DateTime @default(now()) @map("created_at")
  Borrowings Borrowing[]

  @@map("users")
}

model Borrowing {
  id          Int      @id @default(autoincrement())
  bookId      Int      @map("book_id")
  userId      Int      @map("user_id")
  adminId     Int      @map("admin_id")
  borrowDate  DateTime @default(now()) @map("borrow_date")
  returnDate  DateTime? @map("return_date")
  status      BorrowStatus @default(borrowed)

  Book        Book     @relation(fields: [bookId], references: [id])
  User        User     @relation(fields: [userId], references: [id])
  Admin       Admin    @relation(fields: [adminId], references: [id])

  @@map("borrowings")
}

enum BorrowStatus {
  borrowed
  returned
}
